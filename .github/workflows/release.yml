name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  release:
    if: contains(github.event.head_commit.message, 'releaseV')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: hydraide-linux-amd64
            asset_name: hydraide-linux-amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_name: hydraide-windows-amd64.exe
            asset_name: hydraide-windows-amd64.exe
    
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version
      id: extract_version
      shell: bash
      run: |
        echo "Commit message: ${{ github.event.head_commit.message }}"
        # Extract version from commit message, e.g., releaseV1.8 â†’ v1.8
        VERSION=$(echo "${{ github.event.head_commit.message }}" | sed -n 's/.*releaseV\([0-9\.]*\).*/v\1/p')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -a -installsuffix cgo -o ${{ matrix.binary_name }} ./app/server

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.binary_name }}

  create_release:
    needs: release
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'releaseV')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version
      id: extract_version
      run: |
        VERSION=$(echo "${{ github.event.head_commit.message }}" | sed -n 's/.*releaseV\([0-9\.]*\).*/v\1/p')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.extract_version.outputs.version }}
        release_name: Release ${{ steps.extract_version.outputs.version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

    - name: Upload Linux binary
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./hydraide-linux-amd64/hydraide-linux-amd64
        asset_name: hydraide-linux-amd64
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

    - name: Upload Windows binary
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./hydraide-windows-amd64.exe/hydraide-windows-amd64.exe
        asset_name: hydraide-windows-amd64.exe
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}